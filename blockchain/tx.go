package blockchain

import (
	"bytes"
	"encoding/gob"

	"github.com/Harshjha3006/golang-blockchain/wallet"
)

type TxOutput struct {
	Value      int    // value contained in the output
	PubKeyHash []byte // PubKeyHash of the owner
}

type TxOutputs struct {
	Outputs []TxOutput
}
type TxInput struct {
	Id        []byte // id of the transaction referred
	OutIndex  int    // index of the specific output referred
	Signature []byte // signature generated by the private key of the spender
	PubKey    []byte // Pub key of the spender
}

func (in *TxInput) CanUseKey(pubKeyHash []byte) bool {
	lockingHash := wallet.PubkeyHash(in.PubKey)

	return bytes.Equal(lockingHash, pubKeyHash)
}

func (out *TxOutput) Lock(address []byte) {
	pubKeyHash := wallet.Base58Decode(address)
	pubKeyHash = pubKeyHash[1 : len(pubKeyHash)-4]
	out.PubKeyHash = pubKeyHash
}

func (out *TxOutput) IsLockedWithKey(pubKeyHash []byte) bool {
	return bytes.Equal(out.PubKeyHash, pubKeyHash)
}

func NewTXOutput(address string, value int) *TxOutput {
	txo := TxOutput{value, nil}
	txo.Lock([]byte(address))
	return &txo
}

func (outs TxOutputs) Serialize() []byte {
	var res bytes.Buffer
	encoder := gob.NewEncoder(&res)
	err := encoder.Encode(outs)
	Handle(err)
	return res.Bytes()
}

func DeserializeTxOutputs(data []byte) TxOutputs {
	var outputs TxOutputs
	decoder := gob.NewDecoder(bytes.NewReader(data))
	err := decoder.Decode(&outputs)
	Handle(err)
	return outputs
}
